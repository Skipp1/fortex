%%
%% This is file `fortex.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% fortex.dtx  (with options: `package')
%% 
%% This is a generated file.
%% 
%% Copyright (C) 2022 by Skippi https://github.com/Skipp1/fortex
%% --------------------------------------------------------------------------
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3 or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%% 
\RequirePackage{ expl3 }
\ProvidesExplPackage {fortex} {2022-06-24} {0.0.8$\alpha$}
{like noweb without external tooling}
\RequirePackage { l3keys2e }
\RequirePackage { fancyvrb }
\keys_define:nn { fortex } {
  verbose .bool_gset:N = \g__fortex_verbose_bool,
  verbose .default:n  = { true },
  verbose .initial:n  = { false },
  print .tl_gset:N  = \g__fortex_printend_tl,
  print .default:n = { listings },
  print .initial:n = { listings },
  lang .tl_gset:N  = \g__fortex_lang_tl,
  lang .default:n = { text },
  lang .initial:n = { text },
  ext .tl_gset:N  = \g__fortex_ext_tl,
  ext .initial:n = {},
  ext .default:n = {},
  ext .bool_gset:N  = \g__fortex_intext_bool,
  ext .initial:n = { true },
  ext .default:n = { false },
}
\ProcessKeysOptions { fortex }
\bool_if:nT { \g__fortex_verbose_bool } {
  \msg_new:nnn { fortex } { itab } {
    #1 ~ has ~ problems ~ printing ~ tabs ~ to ~ files. ~
    ~ (tabs ~ may ~ turn ~ into ~ \c_circumflex_str \c_circumflex_str I) ~
    ~ Executing ~ with ~ -8bit ~ may ~ fix ~ this.
  }
  \str_case_e:nnT { \c_sys_engine_str } {
    { ptex  } {}
    { uptex } {}
    { xetex } {}
  } {
    \msg_warning:nnx { fortex } { itab } { \c_sys_engine_str }
  }
}

\msg_new:nnn { fortex } { printend } {
  Unknown ~ keyval ~ "print=#1". ~ defaulting ~ to ~ "print=listings"
}
\str_gset:Nx \g__fortex_printend_tl {
  \str_case_e:nnF { \g__fortex_printend_tl} {
    { minted      }{ mint }
    { mint        }{ mint }
    { m           }{ mint }
    { lstlistings }{ lst  }
    { lstlisting  }{ lst  }
    { listings    }{ lst  }
    { listing     }{ lst  }
    { lst         }{ lst  }
    { l           }{ lst  }
  }{
    lst
    \msg_warning:nnx { fortex } { printend } { \g__fortex_printend_tl }
  }
}
\str_if_eq:NNTF { \g__fortex_printend_tl } { mint } {
  \RequirePackage { minted }
  \tl_set:Nn \minted@cachedir {.}
}{
  \RequirePackage { listings }
}
\tl_new:N \g__fortex_print_keystore_tl
\NewDocumentCommand \setfortex { m } {
  \seq_clear:N \l_tmpa_seq
  \prop_clear:N \l_tmpa_prop
  \keyval_parse:NNn { \seq_put_left:Nn \l_tmpa_seq }
                    { \prop_put:Nnn \l_tmpa_prop }
                    { #1 }
  \seq_remove_all:Nn \l_tmpa_seq  { verbose }
  \prop_remove:Nn    \l_tmpa_prop { lang }
  \prop_remove:Nn    \l_tmpa_prop { ext }
  \prop_remove:Nn    \l_tmpa_prop { print }
  \tl_gset:Nx \g__fortex_print_keystore_tl
             { \seq_use:Nn \l_tmpa_seq {,} , }
  \tl_gput_right:Nx \g__fortex_print_keystore_tl
                   { \prop_to_keyval:N \l_tmpa_prop }
  \keys_set_known:nn { fortex } { #1 }
}
\tl_if_empty:NT \g__fortex_ext_tl {
  \msg_new:nnn { fortex } { language } {
    Unable ~ to ~ guess ~ file ~ extension ~ for ~ "language=#1". ~
    ~ defaulting ~ to ~ .txt
  }
  \tl_gset:Nx \g__fortex_ext_tl {
    \str_case_e:nnF { \g__fortex_lang_tl } {
      { python       }{ py  }
      { fortran      }{ f90 }
      { fortranfixed }{ f   }
      { bash         }{ sh  }
      { text         }{ txt }
      { octave       }{ m   }
      { matlab       }{ m   }
      { cpp          }{ cpp }
      { c            }{ c   }
      { tcl          }{ tcl }
      { nasm         }{ s   }
      { makefile     }{ mk  }
    }{
      txt
      \msg_warning:nnx { fortex } { language } { \g__fortex_lang_tl }
    }
  }
}

\file_get:nnN { \c_sys_jobname_str .log } {} \l_tmpa_tl
\tl_new:N \g__fortex_outputdir_tl

\cs_set:Nn \__fortex_outputdir: {
  \tl_if_exist:NTF { \fortex@outputdir } {
    \tl_gset:Nx \g__fortex_outputdir_tl { \fortex@outputdir }
    \file_if_exist:nF {\g__fortex_outputdir_tl
                       \c__fortex_tmpfolder_tl/\c_sys_jobname_str -0.tmp
    }{
      \__fortex_outputdir_aux:
    }
  }{
    \__fortex_outputdir_aux:
  }
  \iow_now:cx { @auxout } {
     \exp_not:n { \gdef\fortex@outputdir }
   { \exp_not:V { \g__fortex_outputdir_tl } }
  }
  \bool_if:NT \g__fortex_verbose_bool {
    \iow_term:x { -output-dir~path:~ \exp_not:V { \g__fortex_outputdir_tl } }
  }
}
\cs_set:Nn \__fortex_outputdir_aux: {
  \str_case_e:nn { \c_sys_engine_str } {
    { luatex } { \__fortex_outputdir_lua_auxi: }
    { ptex   } { \__fortex_outputdir_auxi: }
    { pdftex } { \__fortex_outputdir_auxi: }
    { uptex  } { \__fortex_outputdir_auxi: }
    { xetex  } { \tl_gset:Nn \g__fortex_outputdir_tl {} }
  }
}
\cs_set:Nn \__fortex_outputdir_lua_auxi: {
  \tl_set:Nn \l_tmpa_tl { \lua_now:n { tex.print(arg) } }
  \exp_args:Nnf \regex_extract_once:nnN
                {--?output-dir(ectory)?=([-\.\w+/]*)}
                { \l_tmpa_tl } \l_tmpa_seq
  \seq_get_right:NN \l_tmpa_seq \l_tmpa_tl
  \quark_if_no_value:NF \l_tmpa_tl {
    \tl_if_empty:NF \l_tmpa_tl {
      \tl_gconcat:NNN \g__fortex_outputdir_tl \l_tmpa_tl /
    }
  }
}
\cs_set:Nn \__fortex_outputdir_auxi: {
  \tl_new:N \l__fortex_reallogpath_tl
  \tl_new:N \l__fortex_realtexpath_tl
  \file_get:nnN { \c_sys_jobname_str .log } {
    \endlinechar=`\^^J
    \char_set_catcode_other:N \^^J
  } \l_tmpa_tl
  \quark_if_no_value:NF \l_tmpa_tl {
    \tl_if_empty:NF \l_tmpa_tl {
      \exp_args:Nno \regex_extract_once:nnN {\.?/?[-\.\w+/]*\.log}
                                            { \l_tmpa_tl } \l_tmpa_seq
      \seq_get:NN \l_tmpa_seq \l__fortex_reallogpath_tl
      \exp_args:Nno \regex_extract_once:nnN {\.?/?[-\.\w+/]*\.tex}
                                            { \l_tmpa_tl } \l_tmpa_seq
      \seq_get:NN \l_tmpa_seq \l__fortex_realtexpath_tl
      \tl_clear:N \l_tmpa_tl
      \quark_if_no_value:NT \l__fortex_realtexpath_tl {
        \tl_set:Nn \l__fortex_realtexpath_tl { }
      }
      \quark_if_no_value:NT \l__fortex_reallogpath_tl {
        \tl_set:Nn \l__fortex_realtexpath_tl { }
      }
      \file_parse_full_name:VNNN { \l__fortex_reallogpath_tl }
                                   \l__fortex_reallogpath_tl
                                   \l_tmpa_tl \l_tmpa_tl
      \file_parse_full_name:VNNN { \l__fortex_realtexpath_tl }
                                   \l__fortex_realtexpath_tl
                                   \l_tmpa_tl \l_tmpa_tl
      \str_if_eq:NNF { \l__fortex_reallogpath_tl }
                     { \l__fortex_realtexpath_tl } {
        \tl_gset:Nx  \g__fortex_outputdir_tl { \l__fortex_reallogpath_tl / }
      }
    }
  }
}
\tl_const:Nn \c__fortex_tmpfolder_tl {
  \c_underscore_str fortex- \c_sys_jobname_str
}
\tl_set:Nn \vindexfmtdef { textit }
\tl_set:Nn \vindexfmtcall { textrm }
\tl_set:Nn \vindexfmt { textrm }
\cs_set:Npn \__fortex_codesafedelim:N #1 {
  \str_case_e:nn { \c_sys_engine_str } {
    { pdftex } { \str_set:Nn #1 { ^^c2^^a4 } }
    { luatex } { \str_set:Nn #1 {     ^^a4 } }
    { ptex   } { \str_set:Nn #1 { ^^c2^^a4 } }
    { uptex  } { \str_set:Nn #1 { ^^c2^^a4 } }
    { xetex  } { \str_set:Nn #1 {     ^^a4 } }
  }
}
\NewDocumentCommand \vindex { v } {
  \str_set:Nn \l_tmpa_str  { #1 }
  \exp_args:No \label { code: \l_tmpa_str }
  \exp_args:No \__fortex_vindex_aux:nx \l_tmpa_str { \vindexfmt }
}
\cs_set:Npn \__fortex_vindex_aux:nx #1#2 {
  \str_set:Nn \l__fortex_idxvar_str { #1 }
  \tl_set:Nx \l__fortex_idxfmt_tl { #2 }
  \tl_set:No \l__fortex_verbstr_str { \c_backslash_str verb }
   \str_set:Nn \l__fortex_verbdelim_str { ^^a4 }
  \exp_args:Nnno \tl_replace_all:Nnn \l__fortex_idxvar_str {!} {
    \l__fortex_verbdelim_str!\l__fortex_verbstr_str\l__fortex_verbdelim_str
  }
  \tl_set:Nx \l__fortex_idxvar_str {
      \exp_not:V { \l__fortex_verbstr_str   }
      \exp_not:V { \l__fortex_verbdelim_str }
      \l__fortex_idxvar_str
      \exp_not:V { \l__fortex_verbdelim_str }
      | \l__fortex_idxfmt_tl
  }
  \iow_term:x { \exp_not:o \l__fortex_idxvar_str}
  \exp_args:No \index { \l__fortex_idxvar_str }
}
\NewDocumentCommand \fortexhypercodelinkfmt { m } {
  \texttt { #1 }
}
\NewDocumentCommand \fortexhyperinsert { s m m } {
  \tl_set:Nn \l_tmpa_tl { #3 }
  \str_replace_all:Nnn \l_tmpa_tl {:} {!}
  \bool_if:NF { #1 } {
    \exp_args:Nx \__fortex_vindex_aux:nx { \l_tmpa_tl } { \vindexfmtcall }
  }
  \hyperref [ code: #3 ] {
            \fortexhypercodelinkfmt{ \detokenize { #2 } }
  }
}
\cs_set:Npn \__fortex_mkref_file:nN #1#2 {
  \tl_if_exist:NT { \fortex@codeblockregex } {
    \tl_set:Nx \l__fortex_ref_cache_filename_tl { \c__fortex_tmpfolder_tl/
                                             \file_mdfive_hash:n { #1 } .tmp
    }
    \file_if_exist:nF { \g__fortex_outputdir_tl \l__fortex_ref_cache_filename_tl } {
      \exp_args:Nxx \__fortex_mkref_file_aux:nn { #1 } { \l__fortex_ref_cache_filename_tl }
    }
    \tl_set:Nx { #2 } { \l__fortex_ref_cache_filename_tl }
  }
}
\iow_new:N \c__fortex_reffile_iow
\cs_set:Npn \__fortex_mkref_file_aux:nn #1#2 {
  \file_get:nnN { #1 } { \__fortex_setcatcode: } \l__fortex_filecontents_tl
  \tl_if_empty:NF { \fortex@codeblockregex } {
    \exp_args:NV \regex_replace_case_all:nN {
      \fortex@codeblockregex
    } \l__fortex_filecontents_tl
  }
  \iow_open:Nn \c__fortex_reffile_iow { #2 }
  \iow_now:Nx  \c__fortex_reffile_iow { \exp_not:V { \l__fortex_filecontents_tl } }
  \iow_close:N \c__fortex_reffile_iow
}
\seq_new:N \g__fortex_codenest_seq
\seq_new:N \g__fortex_codeblock_regex_toaux_seq
\cs_set:Npn \__fortex_codeblock_aux:nn #1#2 {
  \seq_if_in:NnF { #1 } { noref } {
    \tl_set:No \l__fortex_verbstr_str { \c_backslash_str verb }
    \__fortex_codesafedelim:N \l__fortex_printdelim_str
    \seq_if_in:NnTF { #1 } { noindex } {
        \tl_set:Nn \l_tmpa_tl { fortexhyperinsert* }
    }{
        \tl_set:Nn \l_tmpa_tl { fortexhyperinsert }
    }
    \tl_set:Nn \l_tmpa_regex {([^\w:]|^)#2\b}
    \str_set:Nx \l_tmpa_str {
                  \exp_not:n { \1                     }
                              \l__fortex_printdelim_str
                  \exp_not:n { \\                     }
                              \l_tmpa_tl
                  \exp_not:n { \{                     }
                              #2
                  \exp_not:n { \} \{                  }
                              \seq_use:Nn \g__fortex_codenest_seq {:}
                  \exp_not:n { \}                     }
                              \l__fortex_printdelim_str
    }
    \seq_gpush:Nx \g__fortex_codeblock_regex_toaux_seq {
                  { \exp_not:V \l_tmpa_str }
    }
    \seq_gpush:Nx \g__fortex_codeblock_regex_toaux_seq {
                  { \exp_not:V \l_tmpa_regex }
    }
    \exp_args:Nx \label { code: \seq_use:Nn \g__fortex_codenest_seq {:}  }
  }
  \seq_if_in:NnF { #1 } { noindex } {
    \exp_args:Nx \__fortex_vindex_aux:nx { \seq_use:Nn \g__fortex_codenest_seq {!} }
                                         { \vindexfmtdef }
  }
}
\NewDocumentEnvironment { codeblock } { O{} m } {
  \group_begin:
  \seq_set_from_clist:Nn \l__fortex_argv_seq { #1 }
  \str_set:Nn \l__fortex_codename_str { #2 }
  \seq_gput_right:Nx \g__fortex_codenest_seq \l__fortex_codename_str
  \__fortex_codeblock_aux:nn \l__fortex_argv_seq { #2 }
} {
  \noindent\textit{
    \small
    End~of~code~block~
    \seq_if_in:NnF \l__fortex_argv_seq { noref } {
      \hyperref [ code: \seq_use:Nn \g__fortex_codenest_seq {:} ]
    }
                { \texttt{\detokenize{ #2 }}}.\\
    \seq_gpop_right:NN \g__fortex_codenest_seq \l_tmpa_tl
  }
  \group_end:
}
\NewDocumentEnvironment { codevar } { O{} m } {
  \seq_set_from_clist:Nn \l__fortex_argv_seq { #1 }
  \seq_set_from_clist:Nn \l__fortex_vars_seq { #2 }
  \seq_map_inline:Nn { \l__fortex_vars_seq } {
    \str_set:Nn \l__fortex_codename_str { ##1 }
    \seq_gput_right:Nx \g__fortex_codenest_seq \l__fortex_codename_str
    \__fortex_codeblock_aux:nn \l__fortex_argv_seq { ##1 }
    \seq_gpop_right:NN \g__fortex_codenest_seq \l_tmpa_tl
  }
} {
}
\hook_gput_code:nnn { enddocument/afterlastpage } { fortex } {
  \iow_now:cx { @auxout } {
     \exp_not:n { \gdef\fortex@codeblockregex }
     { \seq_use:Nn \g__fortex_codeblock_regex_toaux_seq { } }
  }
}
\cs_set:Nn \__fortex_setcatcode: {
  \endlinechar=`\^^J
  \char_set_catcode_other:N \^^J
  \char_set_catcode_other:N \^^I
  \char_set_catcode_other:N \
  \char_set_catcode_other:N \%
  \char_set_catcode_other:N \#
  \char_set_catcode_other:N \{
  \char_set_catcode_other:N \}
  \char_set_catcode_other:N \\
  \char_set_catcode_other:N ^
}
\cs_set:Npn \__fortex_mktmpdir: {
  \file_if_exist:nF { \g__fortex_outputdir_tl
                      \c__fortex_tmpfolder_tl/\c_sys_jobname_str -0.tmp
  }{
    \sys_if_shell_unrestricted:TF {
      \sys_shell_now:x { mkdir~\g__fortex_outputdir_tl \c__fortex_tmpfolder_tl }
    }{
      \msg_new:nnn { fortex } { make_folder } {
        Unable ~ to ~ find ~ folder ~ "##1" ~ please ~ create ~ it ~
        ~ manually ~ or ~ enable ~ -shell-esc ~ to ~ create ~ automatically
      }
      \msg_warning:nnx { fortex } { make_folder } { \c__fortex_tmpfolder_tl }
    }
    \iow_new:N   \l__fortex_testfile_iow
    \iow_open:Nn \l__fortex_testfile_iow {
                 \c__fortex_tmpfolder_tl/\c_sys_jobname_str -0.tmp
    }
    \iow_close:N \l__fortex_testfile_iow
  }
}
\hook_gput_code:nnn { begindocument/end } { fortex } {
    \__fortex_outputdir:
    \__fortex_mktmpdir:
}
\int_new:N \g__fortex_inctmpname_namecount_int
\tl_new:N \g__fortex_tmp_filename_tl
\cs_set:Npn \__fortex_inctmpname: {
  \int_gincr:N \g__fortex_inctmpname_namecount_int
  \tl_gset:Nn \g__fortex_tmp_filename_tl {
    \c__fortex_tmpfolder_tl /
    \c_sys_jobname_str -
    \int_to_arabic:n { \g__fortex_inctmpname_namecount_int } .tmp
  }
}
\tl_const:Nn \c__fortex_default_out_filename_tl
           { \c_sys_jobname_str.\g__fortex_ext_tl }
\tl_new:N   \g__fortex_out_filename_tl
\tl_gset:No \g__fortex_out_filename_tl \c__fortex_default_out_filename_tl
\seq_new:N \g__fortex_lang_stack_seq
\seq_new:N \g__fortex_outfile_stack_seq
\seq_new:N \g__fortex_outfile_history_seq
\NewDocumentEnvironment { subfile } { m m } {
  \seq_gpush:Nn \g__fortex_outfile_history_seq { #2 }
  \seq_gpush:No \g__fortex_outfile_stack_seq \g__fortex_out_filename_tl
  \seq_gpush:No \g__fortex_lang_stack_seq \g__fortex_lang_tl
  \tl_gset:Nn \g__fortex_out_filename_tl { #2 }
  \tl_gset:Nn \g__fortex_lang_tl { #1 }
} {
  \seq_gpop:NN \g__fortex_outfile_stack_seq \l_tmpa_tl
  \tl_gset:No \g__fortex_out_filename_tl \l_tmpa_tl
  \seq_gpop:NN  \g__fortex_lang_stack_seq \l_tmpa_tl
  \tl_gset:No \g__fortex_lang_tl \l_tmpa_tl
}
\hook_gput_code:nnn { enddocument/afterlastpage } { fortex } {
  \iow_now:cx { @auxout } {
     \exp_not:n { \gdef\fortex@subfiles }
     { \exp_not:f { \seq_use:Nn \g__fortex_outfile_history_seq {,} } }
  }
}
\hook_gput_code:nnn { begindocument/end } { fortex } {
  \tl_if_exist:NT { \fortex@subfiles } {
    \seq_set_from_clist:Nn \l_tmpa_seq \fortex@subfiles
     \seq_map_inline:Nn { \l_tmpa_seq } {
      \__fortex_clearfile:n { #1 }
    }
  }
}
\iow_new:N \c__fortex_outfile_iow
\cs_set:Npn \__fortex_clearfile:n #1 {
  \iow_open:Nn \c__fortex_outfile_iow { #1 }
  \iow_close:N \c__fortex_outfile_iow
}
\hook_gput_code:nnn { begindocument/end } { fortex } {
  \__fortex_clearfile:n { \c__fortex_default_out_filename_tl }
}
\cs_set:Npn \__fortex_concat_files:nn #1#2 {
  \file_get:nnN { \g__fortex_outputdir_tl #2 }
                { \__fortex_setcatcode: } \l_tmpa_tl
  \file_get:nnN { \g__fortex_outputdir_tl #1 }
                { \__fortex_setcatcode: } \l_tmpb_tl
  \bool_if:nT { \g__fortex_verbose_bool }{
    \iow_term:x { \exp_not:V { \l_tmpb_tl } }
  }
  \iow_open:Nn \c__fortex_outfile_iow { #2 }
  \iow_now:Nx  \c__fortex_outfile_iow { \exp_not:V \l_tmpa_tl }
  \iow_now:Nx  \c__fortex_outfile_iow { \exp_not:V \l_tmpb_tl }
  \iow_close:N \c__fortex_outfile_iow
}
\cs_set:Npn \__fortex_printcode:nnn #1#2#3 {
  \__fortex_codesafedelim:N \l_tmpa_str
  \str_if_eq:NNTF { \g__fortex_printend_tl } { mint } {
    \tl_set:Nn \minted@cachedir {\g__fortex_outputdir_tl \c__fortex_tmpfolder_tl}
    \inputminted [ escapeinside={\l_tmpa_str \l_tmpa_str}, #1 ] { #2 } { #3 }
  }{
    \lstset{escapechar = {^^c2^^a4}}
    \str_if_eq:NNTF { #2 } { text } {
      \lstinputlisting [ #1 ] { #3 }
    }{
      \lstinputlisting [ language=#2, #1 ] { #3 }
    }
  }
}
\NewDocumentEnvironment { code } {} {
  \VerbatimEnvironment
  \__fortex_inctmpname:
  \VerbatimOut [ codes = { \char_set_catcode_other:N \^^I } ]
               { \g__fortex_tmp_filename_tl }
}{
  \endVerbatimOut
  \tl_if_exist:NT { \fortex@outputdir } {
    \__fortex_concat_files:nn \g__fortex_tmp_filename_tl \g__fortex_out_filename_tl
    \__fortex_mkref_file:nN { \g__fortex_outputdir_tl\g__fortex_tmp_filename_tl }
                              \l_tmpa_tl
    \exp_args:No \__fortex_printcode:nnn { \g__fortex_print_keystore_tl }
                        \g__fortex_lang_tl
                      { \g__fortex_outputdir_tl\l_tmpa_tl }
  }
}
\endinput
%%
%% End of file `fortex.sty'.

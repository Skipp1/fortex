%%
%% This is file `fortex.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% fortex.dtx  (with options: `package')
%% 
%% This is a generated file.
%% 
%% Copyright (C) 2022 by Skippi https://github.com/Skipp1/fortex
%% --------------------------------------------------------------------------
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3 or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%% 

\RequirePackage{ expl3 }
\ProvidesExplPackage {fortex} {2022-12-13} {0.0.10$\alpha$}
                     {like noweb without external tooling}
\RequirePackage { l3keys2e }
\RequirePackage { fancyvrb }
\keys_define:nn { fortex } {
  verbose .bool_gset:N = \g__fortex_verbose_bool,
  verbose .default:n   = { true },
  verbose .initial:n   = { false },
  print .tl_gset:N = \g__fortex_printend_tl,
  print .default:n = { listings },
  print .initial:n = { listings },
  lang .tl_gset:N = \g__fortex_lang_tl,
  lang .default:n = { text },
  lang .initial:n = { text },
  ext .tl_gset:N = \g__fortex_ext_tl,
  ext .default:n = {},
  ext .initial:n = {},
  intext .bool_gset:N = \g__fortex_intext_bool,
  intext .default:n   = { false },
  intext .initial:n   = { true },
  delim .str_gset:N  = \g__fortex_code_delim_str,
  delim .default:n   = {},
  delim .initial:n   = {},
  outdir .tl_gset:N = \g__fortex_outputdir_tl,
  outdir .initial:n = {},
  outdir .default:n = {},
  tmpdir .tl_gset:N = \g__fortex_tmpfolder_tl,
  tmpdir .default:n = { _fortex-\c_sys_jobname_str },
  tmpdir .initial:n = { _fortex-\c_sys_jobname_str },
  vindex~idxnum~font .str_gset:N  = \g__fortex_vindex_fmt_str,
  vindex~idxnum~font .default:n   = { textrm },
  vindex~idxnum~font .initial:n   = { textrm },
  codedef~idxnum~font .str_gset:N  = \g__fortex_idxfmt_codedef_str,
  codedef~idxnum~font .default:n   = { textit },
  codedef~idxnum~font .initial:n   = { textit },
  codecall~idxnum~font .str_gset:N  = \g__fortex_idxfmt_codecall_str,
  codecall~idxnum~font .default:n   = { textrm },
  codecall~idxnum~font .initial:n   = { textrm },
}
\ProcessKeysOptions { fortex }
\bool_if:nT { \g__fortex_verbose_bool } {
  \msg_new:nnn { fortex } { 8bit_tabs } {
    #1 ~ has ~ problems ~ printing ~ tabs ~ to ~ files. ~
    ~ (tabs ~ may ~ turn ~ into ~ \c_circumflex_str \c_circumflex_str I) ~
    ~ Executing ~ with ~ -8bit ~ may ~ fix ~ this.
  }
  \msg_new:nnn { fortex } { 8bit_delim } {
    #1 ~ has ~ problems ~ printing ~ delimiters ~ to ~ files. ~
    ~ #1 ~ MUST ~ be ~ executed ~ with ~ -8bit ~ for ~ fortex ~
    ~ to ~ work ~ at ~ all.
  }
  \str_case_e:nn { \c_sys_engine_str } {
    { ptex  } { \msg_warning:nnn { fortex } { 8bit_delim } { pTeX  } }
    { uptex } { \msg_warning:nnn { fortex } { 8bit_delim } { upTeX } }
    { xetex } { \msg_warning:nnn { fortex } { 8bit_tabs  } { XeTeX } }
  }
}
\msg_new:nnn { fortex } { printend } {
  Unknown ~ keyval ~ "print=#1". ~ defaulting ~ to ~ "print=listings"
}
\str_gset:Nx \g__fortex_printend_tl {
  \str_case_e:nnF { \g__fortex_printend_tl} {
    { minted      }{ mint }
    { mint        }{ mint }
    { m           }{ mint }
    { lstlistings }{ lst  }
    { lstlisting  }{ lst  }
    { listings    }{ lst  }
    { listing     }{ lst  }
    { lst         }{ lst  }
    { l           }{ lst  }
  }{
    lst
    \msg_warning:nnx { fortex } { printend } { \g__fortex_printend_tl }
  }
}
\str_if_eq:NNTF { \g__fortex_printend_tl } { mint } {
  \RequirePackage { minted }
  \tl_set:Nn \minted@cachedir {.}
}{
  \RequirePackage { listings }
}
\tl_new:N \g__fortex_print_keystore_tl
\NewDocumentCommand \setfortex { m } {
  \keys_set_known:nn { fortex } { #1 }
  \keyval_parse:NNn { \seq_put_left:Nn \l_tmpa_seq }
                    { \prop_put:Nnn \l_tmpa_prop }
                    { #1 }
  \seq_remove_all:Nn \l_tmpa_seq  { verbose }
  \prop_remove:Nn    \l_tmpa_prop { print }
  \prop_remove:Nn    \l_tmpa_prop { lang }
  \prop_remove:Nn    \l_tmpa_prop { ext }
  \seq_remove_all:Nn \l_tmpa_seq  { intext }
  \prop_remove:Nn    \l_tmpa_prop { delim }
  \prop_remove:Nn    \l_tmpa_prop { outdir }
  \prop_remove:Nn    \l_tmpa_prop { tmpdir }
  \prop_remove:Nn    \l_tmpa_prop { vindex  ~idxnum~font }
  \prop_remove:Nn    \l_tmpa_prop { codedef ~idxnum~font }
  \prop_remove:Nn    \l_tmpa_prop { codecall~idxnum~font }
  \tl_gset:Nx \g__fortex_print_keystore_tl
             { \seq_use:Nn \l_tmpa_seq {,} , }
  \tl_gput_right:Nx \g__fortex_print_keystore_tl
                   { \prop_to_keyval:N \l_tmpa_prop }
}
\tl_if_empty:NT \g__fortex_ext_tl {
  \msg_new:nnn { fortex } { language } {
    Unable ~ to ~ guess ~ file ~ extension ~ for ~ "language=#1". ~
    ~ defaulting ~ to ~ .txt
  }
  \tl_gset:Nx \g__fortex_ext_tl {
    \str_case_e:nnF { \g__fortex_lang_tl } {
      { python       }{ py  }
      { fortran      }{ f90 }
      { fortranfixed }{ f   }
      { bash         }{ sh  }
      { text         }{ txt }
      { octave       }{ m   }
      { matlab       }{ m   }
      { cpp          }{ cpp }
      { c            }{ c   }
      { tcl          }{ tcl }
      { nasm         }{ s   }
      { makefile     }{ mk  }
    }{
      txt
      \msg_warning:nnx { fortex } { language } { \g__fortex_lang_tl }
    }
  }
}
\cs_set:Nn \__fortex_outputdir: {
  \str_case_e:nnF { \c_sys_engine_str } {
    { luatex } { \__fortex_outputdir_lua_aux: }
  } { \__fortex_outputdir_aux: }
  \bool_if:NT \g__fortex_verbose_bool {
    \iow_term:x { -output-dir~path:~ \exp_not:V { \g__fortex_outputdir_tl } }
  }
}
\cs_set:Nn \__fortex_outputdir_lua_aux: {
  \tl_set:Nn \l_tmpa_tl { \lua_now:n { tex.print(arg) } }
  \exp_args:Nnf \regex_extract_once:nnN
                {--?output-dir(?:ectory)?=([\w\./\-]*)}
                { \l_tmpa_tl } \l_tmpa_seq
  \seq_get_right:NN \l_tmpa_seq \l_tmpa_tl
  \quark_if_no_value:NF \l_tmpa_tl {
    \tl_if_empty:NF \l_tmpa_tl {
      \tl_gconcat:NNN \g__fortex_outputdir_tl \l_tmpa_tl /
    }
  }
}
\cs_set:Nn \__fortex_outputdir_aux: {
  \exp_args:Nx \sys_get_shell:nnN { kpsewhich ~ \c_sys_jobname_str .log }
                                  {} \l__fortex_outputdir_tl
  \str_if_eq:VnF \l__fortex_outputdir_tl \par {
    \file_parse_full_name:VNNN { \l__fortex_outputdir_tl }
                                 \l__fortex_outputdir_tl
                                 \l_tmpa_tl \l_tmpa_tl
    \tl_if_empty:NF \l__fortex_outputdir_tl {
       \tl_gset:Nx \g__fortex_outputdir_tl { \l__fortex_outputdir_tl / }
    }
  }
}
\cs_set:Npn \__fortex_hyperref:nn #1#2 {
  \cs_if_exist_use:NTF \hyperref { [ #1 ] { #2 } } { #2 }
}
\str_case_e:nnT { \c_sys_engine_str } {
  { ptex   } {}
  { uptex  } {}
  { xetex  } {}
  { luatex } {}
} {
  \exp_args:Nx \char_set_catcode:nn { \int_from_hex:n {1e} } {12}
}
\str_if_empty:NT \g__fortex_code_delim_str {
  \str_case_e:nn { \c_sys_engine_str } {
    { luatex } { \str_gset:Nn \g__fortex_code_delim_str {     ^^9c    } }
    { ptex   } { \str_gset:Nn \g__fortex_code_delim_str {     ^^1e    } }
    { uptex  } { \str_gset:Nn \g__fortex_code_delim_str {     ^^1e    } }
    { xetex  } { \str_gset:Nx \g__fortex_code_delim_str { \Uchar57344 } }
    { pdftex } { \str_if_eq:NNTF \g__fortex_printend_tl { mint } {
                   \str_gset:Nn \g__fortex_code_delim_str { ^^c2^^9c }
               }{
                   \str_gset:Nn \g__fortex_code_delim_str { ^^9c }
               }
    }
  }
}
\bool_if:nT { \g__fortex_verbose_bool }{
  \exp_args:Nnx \str_set_convert:Nnnn \l_tmpa_str
                                    { \g__fortex_code_delim_str } { } { utf8/hex }
  \iow_term:x { Code~Delimiter~HEX:~\l_tmpa_str  }
}
\str_case_e:nnT { \c_sys_engine_str } {
  { xetex  } { }
  { luatex } { }
} {
  \char_set_catcode_invalid:N \^^1e
}
\NewDocumentCommand \vindex { v } {
  \label { code: #1 }
  \__fortex_vindex_aux:nx { #1 } { \g__fortex_vindex_fmt_str }
}
\cs_set:Npn \__fortex_vindex_aux:nn #1#2 {
  \str_set:Nn \l__fortex_idxvar_str  { #1 }
  \tl_set:No  \l__fortex_verbstr_str { \c_backslash_str verb }
  \str_if_eq:VnTF \g__fortex_code_delim_str { ^^c2^^9c } {
    \str_set:Nn \l__fortex_verb_delim_str   { ^^9c }
  }{
    \str_set:NV \l__fortex_verb_delim_str { \g__fortex_code_delim_str }
  }
  \exp_args:Nnno \tl_replace_all:Nnn \l__fortex_idxvar_str {!} {
    \l__fortex_verb_delim_str!\l__fortex_verbstr_str\l__fortex_verb_delim_str
  }
  \tl_set:Nx \l__fortex_idxvar_str {
      \exp_not:V { \l__fortex_verbstr_str    }
      \exp_not:V { \l__fortex_verb_delim_str }
      \l__fortex_idxvar_str
      \exp_not:V { \l__fortex_verb_delim_str }
      | #2
  }
  \iow_term:x { \exp_not:o \l__fortex_idxvar_str}
  \exp_args:No \index { \l__fortex_idxvar_str }
}
\cs_generate_variant:Nn \__fortex_vindex_aux:nn {nx, xx}
\NewDocumentCommand \fortexhypercodelinkfmt { m } {
  \texttt { #1 }
}
\NewDocumentCommand \fortexhyperinsert { s m m } {
  \tl_set:Nn \l_tmpa_tl { #3 }
  \str_replace_all:Nnn \l_tmpa_tl {:} {!}
  \bool_if:NF { #1 } {
    \__fortex_vindex_aux:xx { \l_tmpa_tl } { \g__fortex_idxfmt_codecall_str }
  }
  \__fortex_hyperref:nn { code: #3 } {
    \fortexhypercodelinkfmt{ \detokenize { #2 } }
  }
}
\cs_set:Npn \__fortex_mkref_file:nN #1#2 {
  \tl_if_exist:NT { \fortex@codeblockregex } {
    \tl_set:Nx \l__fortex_ref_cache_filename_tl { \g__fortex_tmpfolder_tl/
                                             \file_mdfive_hash:n { #1 } .tmp
    }
    \file_if_exist:nF { \g__fortex_outputdir_tl \l__fortex_ref_cache_filename_tl } {
      \__fortex_mkref_file_aux:xx { #1 } { \l__fortex_ref_cache_filename_tl }
    }
    \tl_set:Nx { #2 } { \l__fortex_ref_cache_filename_tl }
  }
}
\iow_new:N \c__fortex_reffile_iow
\cs_set:Npn \__fortex_mkref_file_aux:nn #1#2 {
  \file_get:nnN { #1 } { \__fortex_setcatcode: } \l__fortex_filecontents_tl
  \tl_if_empty:NF { \fortex@codeblockregex } {
    \exp_args:NV \regex_replace_case_all:nN {
      \fortex@codeblockregex
    } \l__fortex_filecontents_tl
  }
  \iow_open:Nn \c__fortex_reffile_iow { #2 }
  \iow_now:Nx  \c__fortex_reffile_iow { \exp_not:V { \l__fortex_filecontents_tl } }
  \iow_close:N \c__fortex_reffile_iow
}
\cs_generate_variant:Nn \__fortex_mkref_file_aux:nn { xx }
\seq_new:N \g__fortex_codenest_seq
\seq_new:N \g__fortex_codeblock_regex_toaux_seq
\cs_set:Npn \__fortex_codeblock_aux:nn #1#2 {
  \seq_if_in:NnF { #1 } { noref } {
    \tl_set:No \l__fortex_verbstr_str { \c_backslash_str verb }
    \tl_set:Nn \l_tmpa_regex {([^\w:]|^)#2\b}
    \seq_if_in:NnTF { #1 } { noindex } {
        \tl_set:Nn \l_tmpa_tl { fortexhyperinsert* }
    }{
        \tl_set:Nn \l_tmpa_tl { fortexhyperinsert }
    }
    \str_set:Nx \l_tmpa_str {
                  \exp_not:n { \1                     }
                               \g__fortex_code_delim_str
                  \exp_not:n { \\                     }
                              \l_tmpa_tl
                  \exp_not:n { \{                     }
                              #2
                  \exp_not:n { \} \{                  }
                               \seq_use:Nn \g__fortex_codenest_seq {:}
                  \exp_not:n { \}                     }
                               \g__fortex_code_delim_str
    }
    \seq_gpush:Nx \g__fortex_codeblock_regex_toaux_seq {
                  { \exp_not:V \l_tmpa_str }
    }
    \seq_gpush:Nx \g__fortex_codeblock_regex_toaux_seq {
                  { \exp_not:V \l_tmpa_regex }
    }
    \exp_args:Nx \label { code: \seq_use:Nn \g__fortex_codenest_seq {:}  }
  }
  \seq_if_in:NnF { #1 } { noindex } {
    \__fortex_vindex_aux:xx { \seq_use:Nn \g__fortex_codenest_seq {!} }
                                         { \g__fortex_idxfmt_codedef_str }
  }
}
\NewDocumentEnvironment { codeblock } { O{} v } {
  \group_begin:
  \exp_args:Nnf \seq_set_from_clist:Nn \l__fortex_argv_seq {
    \bool_if:NTF \g__fortex_intext_bool { #1 } { noref, #1 }
  }
  \str_set:Nn \l__fortex_codename_str { #2 }
  \seq_gput_right:Nx \g__fortex_codenest_seq \l__fortex_codename_str
  \__fortex_codeblock_aux:nn \l__fortex_argv_seq { #2 }
} {
  \seq_if_in:NnTF \l__fortex_argv_seq { noref } {
    \aftercodeblock { #2 }
  } {
    \aftercodeblock { #2 } [ \seq_use:Nn \g__fortex_codenest_seq {:} ]
  }
  \seq_gpop_right:NN \g__fortex_codenest_seq \l_tmpa_tl
  \group_end:
}
\NewDocumentCommand { \aftercodeblock } { m O{} } {
  \noindent \textit { \small End~of~code~block~
    \tl_if_empty:NF { #2 } { \__fortex_hyperref:nn { #2 } }
    { \texttt { \tl_to_str:N { #1 } } } . \\
  }
}
\NewDocumentEnvironment { codevar } { O{} v } {
  \seq_set_from_clist:Nn \l__fortex_argv_seq { #1 }
  \seq_set_from_clist:Nn \l__fortex_vars_seq { #2 }
  \seq_map_inline:Nn { \l__fortex_vars_seq } {
    \str_set:Nn \l__fortex_codename_str { ##1 }
    \seq_gput_right:Nx \g__fortex_codenest_seq \l__fortex_codename_str
    \__fortex_codeblock_aux:nn \l__fortex_argv_seq { ##1 }
    \seq_gpop_right:NN \g__fortex_codenest_seq \l_tmpa_tl
  }
} {
   \seq_if_in:NnTF \l__fortex_argv_seq { noref } {
    \aftercodeblock { #2 }
  } {
    \aftercodeblock { #2 } [ \seq_use:Nn \g__fortex_codenest_seq {:} ]
  }
}
\NewDocumentCommand { \aftercodevar } { m O{} } { \relax }
\hook_gput_code:nnn { enddocument/afterlastpage } { fortex } {
  \iow_now:cx { @auxout } {
     \exp_not:n { \gdef\fortex@codeblockregex }
     { \seq_use:Nn \g__fortex_codeblock_regex_toaux_seq { } }
  }
}
\str_if_eq:NNTF { \g__fortex_printend_tl } { mint } {
  \NewDocumentCommand { \MakeShortFortex } { O{} m m } {
    \int_new:c   { g__fortex_default_#3_catcode_int }
    \int_gset:cn { g__fortex_default_#3_catcode_int } {
      \char_value_catcode:n { `#3 }
    }
    \token_if_active:NT #3 {
      \cs_gset_eq:cN { __fortex_default_ \token_to_str:N #3 _cs: } #3
    }
    \newmintinline [ __fortex_shortmint_cs ] { #2 } { #1 }
    \cs_set:Npn \__fortex_shortmint: { \__fortex_shortmint_i: }
    \char_set_catcode_active:N #3
    \char_set_active_eq:NN #3 \__fortex_shortmint:
    \exp_args:Nnno \tl_set_rescan:Nnn \l_tmpa_a {
      \char_set_catcode_parameter:N e
      \char_set_catcode_active:N   #3
    } { e1#3 }
    \exp_last_unbraced:NNV \cs_set:Npn \__fortex_shortmint_i: \l_tmpa_a {
      \mode_if_math:TF {
        \token_to_str:N #3
      } {
        { \__fortex_shortmint_cs#3##1#3 }
      }
    }
  }
  \NewDocumentCommand { \UnMakeShortFortex } { v } {
    \exp_args:Nnx \char_set_catcode:nn { `#1 } {
      \int_use:c { g__fortex_default_#1_catcode_int }
    }
    \exp_args:Nc \int_compare:nNnT { g__fortex_default_#1_catcode_int } = { 13 } {
      \char_set_active_eq:NN #1 { __fortex_default_#1_cs: }
    }
  }
} {
  \NewDocumentCommand { \MakeShortFortex } { O{} m v} {
    \str_if_eq:NNTF { #2 } { text } {
      \lstMakeShortInline [ #1 ] { #3 }
    }{
      \lstMakeShortInline [ language=#2, #1 ] { #3 }
    }
  }
  \NewDocumentCommand { \UnMakeShortFortex } { v } {
    \lstDeleteShortInline { #1 }
  }
}
\cs_set:Nn \__fortex_setcatcode: {
  \cs_set_eq:NN \do \char_set_catcode_other:N
  \dospecials
  \char_set_catcode_other:N \^^J
  \char_set_catcode_other:N \^^I
  \endlinechar=`\^^J
}
\cs_set:Npn \__fortex_mktmpdir: {
  \file_if_exist:nF { \g__fortex_outputdir_tl
                      \g__fortex_tmpfolder_tl/\c_sys_jobname_str -0.tmp
  }{
    \sys_if_shell_unrestricted:TF {
      \sys_shell_now:x { mkdir~\g__fortex_outputdir_tl \g__fortex_tmpfolder_tl }
    }{
      \msg_new:nnn { fortex } { make_folder } {
        Unable ~ to ~ find ~ folder ~ "##1" ~ please ~ create ~ it ~
        ~ manually ~ or ~ enable ~ -shell-esc ~ to ~ create ~ automatically
      }
      \msg_warning:nnx { fortex } { make_folder } { \g__fortex_tmpfolder_tl }
    }
    \iow_new:N   \l__fortex_testfile_iow
    \iow_open:Nn \l__fortex_testfile_iow
               { \g__fortex_tmpfolder_tl / \c_sys_jobname_str -0.tmp }
    \iow_close:N \l__fortex_testfile_iow
  }
}
\hook_gput_code:nnn { begindocument/end } { fortex } {
    \tl_if_empty:NT \g__fortex_outputdir_tl {
      \__fortex_outputdir:
    }
    \__fortex_mktmpdir:
}
\int_new:N \g__fortex_inctmpname_namecount_int
\tl_new:N \g__fortex_tmp_filename_tl
\cs_set:Npn \__fortex_inctmpname: {
  \int_gincr:N \g__fortex_inctmpname_namecount_int
  \tl_gset:Nn \g__fortex_tmp_filename_tl {
    \g__fortex_tmpfolder_tl /
    \c_sys_jobname_str -
    \int_to_arabic:n { \g__fortex_inctmpname_namecount_int } .tmp
  }
}
\tl_const:Nn \c__fortex_default_out_filename_tl
           { \c_sys_jobname_str.\g__fortex_ext_tl }
\tl_new:N   \g__fortex_out_filename_tl
\tl_gset:No \g__fortex_out_filename_tl \c__fortex_default_out_filename_tl
\seq_new:N \g__fortex_lang_stack_seq
\seq_new:N \g__fortex_outfile_stack_seq
\seq_new:N \g__fortex_outfile_history_seq
\NewDocumentEnvironment { subfile } { m m } {
  \seq_gpush:Nn \g__fortex_outfile_history_seq { #2 }
  \seq_gpush:No \g__fortex_outfile_stack_seq \g__fortex_out_filename_tl
  \seq_gpush:No \g__fortex_lang_stack_seq \g__fortex_lang_tl
  \tl_gset:Nn \g__fortex_out_filename_tl { #2 }
  \tl_gset:Nn \g__fortex_lang_tl { #1 }
} {
  \seq_gpop:NN \g__fortex_outfile_stack_seq \l_tmpa_tl
  \tl_gset:No \g__fortex_out_filename_tl \l_tmpa_tl
  \seq_gpop:NN  \g__fortex_lang_stack_seq \l_tmpa_tl
  \tl_gset:No \g__fortex_lang_tl \l_tmpa_tl
}
\hook_gput_code:nnn { enddocument/afterlastpage } { fortex } {
  \iow_now:cx { @auxout } {
     \exp_not:n { \gdef\fortex@subfiles }
     { \exp_not:f { \seq_use:Nn \g__fortex_outfile_history_seq {,} } }
  }
}
\hook_gput_code:nnn { begindocument/end } { fortex } {
  \tl_if_exist:NT { \fortex@subfiles } {
    \seq_set_from_clist:Nn \l_tmpa_seq \fortex@subfiles
     \seq_map_inline:Nn { \l_tmpa_seq } {
      \__fortex_clearfile:n { #1 }
    }
  }
}
\iow_new:N \c__fortex_outfile_iow
\cs_set:Npn \__fortex_clearfile:n #1 {
  \iow_open:Nn \c__fortex_outfile_iow { #1 }
  \iow_close:N \c__fortex_outfile_iow
}
\hook_gput_code:nnn { begindocument/end } { fortex } {
  \__fortex_clearfile:n { \c__fortex_default_out_filename_tl }
}
\cs_set:Npn \__fortex_concat_files:nn #1#2 {
  \file_get:nnN { \g__fortex_outputdir_tl #2 }
                { \__fortex_setcatcode: } \l_tmpa_tl
  \file_get:nnN { \g__fortex_outputdir_tl #1 }
                { \__fortex_setcatcode: } \l_tmpb_tl
  \bool_if:nT { \g__fortex_verbose_bool }{
    \iow_term:x { \exp_not:V { \l_tmpb_tl } }
  }
  \iow_open:Nn \c__fortex_outfile_iow { #2 }
  \iow_now:Nx  \c__fortex_outfile_iow { \exp_not:V \l_tmpa_tl }
  \iow_now:Nx  \c__fortex_outfile_iow { \exp_not:V \l_tmpb_tl }
  \iow_close:N \c__fortex_outfile_iow
}
\cs_set:Npn \__fortex_lstinputlistings_aux:nn #1#2 {
  \seq_set_from_clist:NN \l__fortex_listings_opt_seq \g__fortex_print_keystore_tl
  \seq_push:Nn \l__fortex_listings_opt_seq { escapechar={#2} }
  \str_if_eq:NNF { #2 } { text } {
    \seq_push:Nx \l__fortex_listings_opt_seq { language={\g__fortex_lang_tl} }
  }
  \tl_set_eq:NN \l__fortex_lst@DefEC_orig_tl \lst@DefEC
  \str_case_e:nnT { \c_sys_engine_str } {
    { xetex } {}
    { uptex } {}
    {  ptex } {}
  }{
    \seq_set_split:NnV \l__fortex_lst@DefEC_seq {} { \lst@DefEC }
    \seq_pop_right:NN  \l__fortex_lst@DefEC_seq \l_tmpa_tl
    \seq_put_right:Nx  \l__fortex_lst@DefEC_seq { #2 \exp_not:V \l_tmpa_tl}
    \tl_set:Nx \lst@DefEC { \seq_use:Nn \l__fortex_lst@DefEC_seq {} }
    \seq_push:Nn \l__fortex_listings_opt_seq { extendedchars=true }
  }
  \exp_last_unbraced:Nx \lstinputlisting
                        { [ \seq_use:Nn \l__fortex_listings_opt_seq {,} ] } { #1 }
  \tl_set_eq:NN \lst@DefEC \l__fortex_lst@DefEC_orig_tl
}
\cs_generate_variant:Nn \__fortex_lstinputlistings_aux:nn { xx }
\cs_set:Npn \__fortex_inputminted_aux:nn #1#2 {
  \seq_set_from_clist:NN \l__fortex_minted_opt_seq \g__fortex_print_keystore_tl
  \seq_push:Nn \l__fortex_minted_opt_seq { escapeinside={#2 #2} }
  \tl_set:Nn \minted@cachedir { \g__fortex_outputdir_tl \g__fortex_tmpfolder_tl }
  \exp_last_unbraced:Nx \inputminted
                      { [ \seq_use:Nn \l__fortex_minted_opt_seq {,} ] }
                      { \g__fortex_lang_tl } { #1 }
}
\cs_generate_variant:Nn \__fortex_inputminted_aux:nn { xx }
\NewDocumentEnvironment { code } {} {
  \VerbatimEnvironment
  \__fortex_inctmpname:
  \VerbatimOut [ codes = { \char_set_catcode_other:N \^^I } ]
               { \g__fortex_tmp_filename_tl }
}{
  \endVerbatimOut
  \tl_if_exist:NT { \fortex@codeblockregex } {
    \__fortex_concat_files:nn \g__fortex_tmp_filename_tl
                              \g__fortex_out_filename_tl
    \__fortex_mkref_file:nN { \g__fortex_outputdir_tl \g__fortex_tmp_filename_tl }
                              \l_tmpa_tl
    \str_if_eq:NNTF { \g__fortex_printend_tl } { mint }
                    { \__fortex_inputminted_aux:xx }
                    { \__fortex_lstinputlistings_aux:xx }
    { \g__fortex_outputdir_tl \l_tmpa_tl } \g__fortex_code_delim_str
  }
}
\endinput
%%
%% End of file `fortex.sty'.
